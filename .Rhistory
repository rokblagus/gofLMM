id<-id[-1]
x4<-runif(sum(n))
aids.art<-data.frame(ptnt=id,outcome=yy,x1=x1,x2=x22,x4=x4)
library(nlme)
fit<-lme(fixed=outcome~ x2+x1:x2, data=aids.art, random=~x2|ptnt,control=lmeControl( returnObject = TRUE),method="REML" )
gof.lmm.sim.orderbyoriginal.type2(fit,std.type=2,use.correction.for.imbalance=FALSE,M=25,verbose=TRUE)
smp<-sample(c(-1,1),size=1)
smp
smp<-sample(c(-1,1),size=1)
smp
smp<-sample(c(-1,1),size=1)
smp
library(gofLMM)
library(gofLMM)
detach("package:gofLMM", unload = TRUE)
library(gofLMM)
(sqrt(5)+1)/(2*sqrt(5))
p<-(sqrt(5)+1)/(2*sqrt(5))
p2<--(sqrt(5)-1)/(2)
p
p2
p<-(sqrt(5)+1)/(2*sqrt(5))
p2<-(sqrt(5)-1)/(2*sqrt(5))
p
p2
p+p2
p1<-(sqrt(5)+1)/(2*sqrt(5))
p2<-(sqrt(5)-1)/(2*sqrt(5))
x1<--(sqrt(5)-1)/2
x2<-(sqrt(5)+1)/2
p1
p2
x1
x2
p1<-(sqrt(5)+1)/(2*sqrt(5))
p2<-(sqrt(5)-1)/(2*sqrt(5))
x1<--(sqrt(5)-1)/2
x2<-(sqrt(5)+1)/2
y<-rbinom(n,size=1,prob=p2)
y
table(y)
12/n
n
n=100
p1<-(sqrt(5)+1)/(2*sqrt(5))
p2<-(sqrt(5)-1)/(2*sqrt(5))
x1<--(sqrt(5)-1)/2
x2<-(sqrt(5)+1)/2
y<-rbinom(n,size=1,prob=p2)
y
sum(y)
p2
my.mammen<-function(n){
p1<-(sqrt(5)+1)/(2*sqrt(5))
p2<-(sqrt(5)-1)/(2*sqrt(5))
x1<--(sqrt(5)-1)/2
x2<-(sqrt(5)+1)/2
y<-rbinom(n,size=1,prob=p2)
y[y==0]<-x1
y[y==1]<-x2
y
}
mean(my.mammen(10000))
var(my.mammen(10000))
var(my.mammen(1000000))
mean(my.mammen(1000000))
mean(my.mammen(100000000))
var(my.mammen(100000000))
library(gofLMM)
library(gofLMM)
library(gofLMM)
remove.packages("gofLMM")
install.packages("C:/Users/rblagus/Dropbox (MF Uni LJ)/gofLinearMixedModel/package/gofLMM_6.0.0.zip", repos = NULL, type = "win.binary")
library(gofLMM)
?gof.lmm
N=50
set.seed(1)
n<-floor(runif(N,min=1,max=15)) #imbalanced
betas<-c(1,1,1,15) #don't change! #the last one is only used whe omit.important.predictor=TRUE
norm.eps<-FALSE
shape=0.5
scale=1
norm.re.intercept<-FALSE
shape.re.intercept=0.5
scale.re.intercept=1
norm.re.slope<-FALSE
shape.re.slope=0.5
scale.re.slope=1
sim.re.slope=FALSE
over.parameterized.model=FALSE #i.e. fit a variable which is not used when generating the data
omit.important.predictor=FALSE
yy<-NA
x22<-NA
id<-NA
x1<-NA
for (gg in 1:N){
id<-c(id,rep(gg,each=n[gg]))
x11<-rep(rbinom(1,size=1,prob=0.4),each=n[gg])
x1<-c(x1,x11)
if (norm.re.intercept==TRUE) re.int<-rnorm(1,sd=sqrt(2)) else re.int<-rgamma(1,shape=shape.re.intercept,scale=scale.re.intercept)-shape.re.intercept*scale.re.intercept
b<-rep(re.int,each=n[gg])
if (norm.re.slope==TRUE) re.slope<-rnorm(1,sd=sqrt(1)) else re.slope<-rgamma(1,shape=shape.re.slope,scale=scale.re.slope)-shape.re.slope*scale.re.slope
b2<-rep(re.slope,each=n[gg])
x2<-1:n[gg]
x4<-runif(n[gg])
if (norm.eps==TRUE) eps<-rnorm(n[gg]) else eps<-rgamma(n[gg],shape=shape,scale=scale)-shape*scale
if (sim.re.slope==TRUE) {
if (omit.important.predictor==FALSE) y<-betas[1]+betas[2]*x2+betas[3]*(x11*x2)+b+b2*x2+eps else y<-betas[1]+betas[2]*x2+betas[3]*(x11*x2)+b+b2*x2+eps+betas[4]*x4
} else {
if (omit.important.predictor==FALSE) y<-betas[1]+betas[2]*x2+betas[3]*(x11*x2)+b+eps else y<-betas[1]+betas[2]*x2+betas[3]*(x11*x2)+b+eps+betas[4]*x4
}
yy<-c(yy,y)
x22<-c(x22,x2)
}
yy<-yy[-1]
x22<-x22[-1]
x1<-x1[-1]
id<-id[-1]
x4<-runif(sum(n))
aids.art<-data.frame(ptnt=id,outcome=yy,x1=x1,x2=x22,x4=x4)
library(nlme)
fit<-lme(fixed=outcome~ x2+x1:x2, data=aids.art, random=~x2|ptnt,control=lmeControl( returnObject = TRUE),method="REML" )
fit.gof<-gof.lmm(fit,residuals= "individual" ,std.type=2,use.correction.for.imbalance=FALSE,subset.fix=outcome~x2,type= "simulation" ,M=25,order.by.original=TRUE,use.mammen=TRUE,force.permutation.with=FALSE,verbose=TRUE)
fit.gof<-gof.lmm(fit,residuals= "individual" ,std.type=2,use.correction.for.imbalance=FALSE,subset.fix=outcome~x2,type= "simulation" ,M=25,order.by.original=TRUE,force.permutation.with=FALSE,verbose=TRUE,flip.cluster=TRUE,use.mammen=TRUE)
fit.gof<-gof.lmm(fit,residuals= "individual" ,std.type=2,use.correction.for.imbalance=FALSE,subset.fix=outcome~x2,type= "simulation" ,M=25,order.by.original=TRUE,force.permutation.with=FALSE,verbose=TRUE,flip.cluster=TRUE)
library(gofLMM)
?gof.lmm
gof.lmm()
gof.lmm
library(gofLMM)
library(gofLMM)
?gof.lmm
remove.packages("gofLMM")
install.packages("C:/Users/rblagus/Dropbox (MF Uni LJ)/gofLinearMixedModel/package/gofLMM_7.0.0.zip", repos = NULL, type = "win.binary")
library(gofLMM)
?gof.lmm
library(gofLMM)
?gof.lmm
N=50
set.seed(1)
n<-floor(runif(N,min=1,max=15)) #imbalanced
betas<-c(1,1,1,15) #don't change! #the last one is only used whe omit.important.predictor=TRUE
norm.eps<-FALSE
shape=0.5
scale=1
norm.re.intercept<-FALSE
shape.re.intercept=0.5
scale.re.intercept=1
norm.re.slope<-FALSE
shape.re.slope=0.5
scale.re.slope=1
sim.re.slope=FALSE
over.parameterized.model=FALSE #i.e. fit a variable which is not used when generating the data
omit.important.predictor=FALSE
yy<-NA
x22<-NA
id<-NA
x1<-NA
for (gg in 1:N){
id<-c(id,rep(gg,each=n[gg]))
x11<-rep(rbinom(1,size=1,prob=0.4),each=n[gg])
x1<-c(x1,x11)
if (norm.re.intercept==TRUE) re.int<-rnorm(1,sd=sqrt(2)) else re.int<-rgamma(1,shape=shape.re.intercept,scale=scale.re.intercept)-shape.re.intercept*scale.re.intercept
b<-rep(re.int,each=n[gg])
if (norm.re.slope==TRUE) re.slope<-rnorm(1,sd=sqrt(1)) else re.slope<-rgamma(1,shape=shape.re.slope,scale=scale.re.slope)-shape.re.slope*scale.re.slope
b2<-rep(re.slope,each=n[gg])
x2<-1:n[gg]
x4<-runif(n[gg])
if (norm.eps==TRUE) eps<-rnorm(n[gg]) else eps<-rgamma(n[gg],shape=shape,scale=scale)-shape*scale
if (sim.re.slope==TRUE) {
if (omit.important.predictor==FALSE) y<-betas[1]+betas[2]*x2+betas[3]*(x11*x2)+b+b2*x2+eps else y<-betas[1]+betas[2]*x2+betas[3]*(x11*x2)+b+b2*x2+eps+betas[4]*x4
} else {
if (omit.important.predictor==FALSE) y<-betas[1]+betas[2]*x2+betas[3]*(x11*x2)+b+eps else y<-betas[1]+betas[2]*x2+betas[3]*(x11*x2)+b+eps+betas[4]*x4
}
yy<-c(yy,y)
x22<-c(x22,x2)
}
yy<-yy[-1]
x22<-x22[-1]
x1<-x1[-1]
id<-id[-1]
x4<-runif(sum(n))
aids.art<-data.frame(ptnt=id,outcome=yy,x1=x1,x2=x22,x4=x4)
library(nlme)
fit<-lme(fixed=outcome~ x2+x1:x2, data=aids.art, random=~x2|ptnt,control=lmeControl( returnObject = TRUE),method="REML" )
fit.gof<-gof.lmm(fit,residuals= "individual" ,std.type=2,use.correction.for.imbalance=FALSE,subset.fix=outcome~x2,type= "simulation" ,M=25,order.by.original=FALSE,force.permutation.with=FALSE,verbose=TRUE)
plot.gofLMM(fit.gof,type=2,subset.M=NULL,xlab="",main="Example")
fit.gof<-gof.lmm(fit,residuals= "individual" ,std.type=2,use.correction.for.imbalance=FALSE,subset.fix=outcome~x2,type= "simulation" ,M=25,order.by.original=FALSE,force.permutation.with=FALSE,verbose=TRUE,use.sigmoid = TRUE)
gof.lmm
update.packages("gofLMM")
gof.lmm
gof.lmm()
gof.lmm
library(gofLMM)
library(MASS)
library(gofLMM)
library(nlme)
##sim. data function. allows for a single random effect where Z can either be column of ones or (and) one of the fixed effects covariates (in this case the D will be assumed diagonal). Desing can be unlabanced. Both error sources can be non-normal.
##this is only for longitudinal for a typical randomized study.
sim.data.cluster<-function(N,n,betas, norm.eps,var.eps=NULL,shape=NULL,scale=NULL,norm.re.intercept,var.re.intercept=NULL,shape.re.intercept=NULL,scale.re.intercept=NULL,sim.re.slope,
norm.re.slope=NULL,var.re.slope=NULL,shape.re.slope=NULL,scale.re.slope=NULL,sim.x2.qdr=FALSE,b.qdr=NULL){
yy<-NA
id<-NA
x1<-NA
x2<-NA
for (gg in 1:N){
id<-c(id,rep(gg,each=n[gg]))
x11<-runif(n[gg])
x1<-c(x1,x11)
x22<-runif(n[gg])
x2<-c(x2,x22)
if (norm.re.intercept==TRUE) re.int<-rnorm(1,sd=sqrt(var.re.intercept)) else re.int<-rgamma(1,shape=shape.re.intercept,scale=scale.re.intercept)-shape.re.intercept*scale.re.intercept
b<-rep(re.int,each=n[gg])
if (norm.eps==TRUE) eps<-rnorm(n[gg],sd=sqrt(var.eps)) else eps<-rgamma(n[gg],shape=shape,scale=scale)-shape*scale
if (sim.re.slope==TRUE) {
if (norm.re.slope==TRUE) re.slope<-rnorm(1,sd=sqrt(var.re.slope)) else re.slope<-rgamma(1,shape=shape.re.slope,scale=scale.re.slope)-shape.re.slope*scale.re.slope
b2<-rep(re.slope,each=n[gg])
if (sim.x2.qdr==FALSE)   y<-betas[1]+betas[2]*x11+betas[3]*x22+b+b2*x11+eps  else y<-betas[1]+betas[2]*x11+betas[3]*x22+b+b2*x11+eps+ b.qdr*x11**2
} else {
if (sim.x2.qdr==FALSE) y<-betas[1]+betas[2]*x11+betas[3]*x22+b+eps   else y<-betas[1]+betas[2]*x11+betas[3]*x22+b+eps+ b.qdr*x11**2
}
yy<-c(yy,y)
}
yy<-yy[-1]
x2<-x2[-1]
x1<-x1[-1]
id<-id[-1]
df<-data.frame(id=id,y=yy,x1=x1,x2=x2)
df
}
?gof.lmm
gof.lmm
install.packages("C:/Users/rblagus/Dropbox (MF Uni LJ)/gofLinearMixedModel/package/gofLMM_9.0.0.zip", repos = NULL, type = "win.binary")
library(gofLMM)
?gof.lmm
?sim.data.cluster
install.packages("RLRsim")
library(RLRsim)
?exactRLRT
install.packages(c("doParallel", "glmnet"))
my.fast.t.test<-function(data.Class1, data.Class2, n1, n2){
mean.x1<-colMeans(data.Class1)
mean.x2<-colMeans(data.Class2)
s2p<-(colSums( (data.Class1-rep(mean.x1, each=n1))^2) +
colSums( (data.Class2-rep(mean.x2, each=n2))^2))/(n1+n2-2)
t.values<-(mean.x1-mean.x2)/(sqrt(s2p*(1/n1+1/n2)))
t.values
}
rpareto<-function (n, location, shape) {location/runif(n)^(1/shape)} # location = x_m, shape = alpha; x >= location
hist(rpareto(10000,location=10,shape=20))
set.seed(1)
n=25
p.x=0.5
M=1000
B=5000
y<-rpareto(n,location=10,shape=1.5)
x<-rbinom(n,size=1,prob=p.x)
boxplot(y~x)
table(x)
testt<-t.test(y[x==0],y[x==1],var.equal=T)
n1<-sum(x==0)
n2<-n-n1
d<-matrix(rep(y,M),ncol=M)
or<-matrix(1:n,nrow=n,ncol=M,byrow=F)
or<-apply(or,2,sample)
m<-matrix(unlist(lapply(1:M,function(i,x,y) x[y[,i],i],d,or )),ncol=M,byrow=F)
d1<-m[1:n1,]
d2<-m[(n1+1):n,]
tt<-my.fast.t.test(d1,d2,n1,n2)
testt$p.value
y<-rpareto(n,location=10,shape=1.5)
x<-rbinom(n,size=1,prob=p.x)
testt<-t.test(y[x==0],y[x==1],var.equal=T)
n1<-sum(x==0)
n2<-n-n1
d<-matrix(rep(y,M),ncol=M)
or<-matrix(1:n,nrow=n,ncol=M,byrow=F)
or<-apply(or,2,sample)
m<-matrix(unlist(lapply(1:M,function(i,x,y) x[y[,i],i],d,or )),ncol=M,byrow=F)
d1<-m[1:n1,]
d2<-m[(n1+1):n,]
tt<-my.fast.t.test(d1,d2,n1,n2)
boxplot(y~x)
testt$p.value
set.seed(1)
n=25
p.x=0.5
M=10
B=5000
pt<-perm.t<-rep(NA,B)
for (ii in 1:B){
#y<-rexp(n,rate=1)
y<-rpareto(n,location=10,shape=1.5)
x<-rbinom(n,size=1,prob=p.x)
testt<-t.test(y[x==0],y[x==1],var.equal=T)
n1<-sum(x==0)
n2<-n-n1
d<-matrix(rep(y,M),ncol=M)
or<-matrix(1:n,nrow=n,ncol=M,byrow=F)
or<-apply(or,2,sample)
m<-matrix(unlist(lapply(1:M,function(i,x,y) x[y[,i],i],d,or )),ncol=M,byrow=F)
d1<-m[1:n1,]
d2<-m[(n1+1):n,]
tt<-my.fast.t.test(d1,d2,n1,n2)
pt[ii]<-testt$p.value
perm.t[ii]<-  (1+ sum(abs(tt)>=abs(testt$stat)) )/(M+1)
}
hist(pt)
sum(pt<0.05)/B
sum(pt<0.01)/B
sum(pt<0.90)/B
set.seed(1)
n=25
p.x=0.5
M=1000
B=5000
pt<-perm.t<-rep(NA,B)
for (ii in 1:B){
#y<-rexp(n,rate=1)
y<-rpareto(n,location=10,shape=1.5)
x<-rbinom(n,size=1,prob=p.x)
testt<-t.test(y[x==0],y[x==1],var.equal=T)
n1<-sum(x==0)
n2<-n-n1
d<-matrix(rep(y,M),ncol=M)
or<-matrix(1:n,nrow=n,ncol=M,byrow=F)
or<-apply(or,2,sample)
m<-matrix(unlist(lapply(1:M,function(i,x,y) x[y[,i],i],d,or )),ncol=M,byrow=F)
d1<-m[1:n1,]
d2<-m[(n1+1):n,]
tt<-my.fast.t.test(d1,d2,n1,n2)
pt[ii]<-testt$p.value
perm.t[ii]<-  (1+ sum(abs(tt)>=abs(testt$stat)) )/(M+1)
}
par(mfrow=c(1,2))
hist(pt)
hist(perm.t)
sum(pt<0.05)/B
sum(pt<0.01)/B
sum(pt<0.90)/B
sum(perm.t<0.05)/B
sum(perm.t<0.01)/B
sum(perm.t<0.9)/B
library(doParallel)
m=10
alpha=0.05
rbinom(1,size=m,prob=alpha)
rbinom(1,size=m,prob=alpha)
rbinom(1,size=m,prob=alpha)
rbinom(1,size=m,prob=alpha)
B<-500000
m=10
alpha=0.05
V<-rep(NA,B)
for (i in 1:B){
V[i]<-rbinom(1,size=m,prob=alpha)
}
U<-m-V
R<-V
mean(V>=1)
mean(V[R>0]/R[R>0])*mean(R>0)
B<-10000
alpha=0.05
mm<-seq(from=10,to=100,by=10)
fwer<- rep(NA,length(mm))
z=0
for (m in mm){
z=z+1
V<-rep(NA,B)
for (i in 1:B){
V[i]<-rbinom(1,size=m,prob=alpha)
}
R<-V
fwer[z]<-mean(V>=1)
}
plot(mm,fwer,type="b",col="red",xlab="Num var")
####
B<-10000
m=20
m0=10
alpha=0.05
power=0.8
V<-rbinom(B,size=m0,prob=alpha)
S<-rbinom(B,size=m-m0,prob=power)
R<-V+S
fwer<-mean(V>=1)
fdr<-mean(V[R>0]/R[R>0])*mean(R>0)
fwer
fdr
B<-10000
mm<-seq(from=20,to=100,by=10)
m0=10
alpha=0.05
power=0.8
zz=0
fwer<-fdr<-rep(NA,length(mm))
for (m in mm){
zz=zz+1
V<-rbinom(B,size=m0,prob=alpha)
S<-rbinom(B,size=m-m0,prob=power)
R<-V+S
fwer[zz]<-mean(V>=1)
fdr[zz]<-mean(V[R>0]/R[R>0])*mean(R>0)
}
plot(mm,fwer,col="red",type="b",ylim=c(0,0.5))
lines(mm,fdr,col="blue")
points(mm,fdr,col="blue")
legend("topleft",legend=c("FWER","FDR"),col=c("red","blue"),lty=1,pch=1)
B<-10000
mm<-seq(from=20,to=100,by=10)
m1=10
alpha=0.05
power=0.8
zz=0
fwer<-fdr<-rep(NA,length(mm))
for (m in mm){
zz=zz+1
V<-rbinom(B,size=m-m1,prob=alpha)
S<-rbinom(B,size=m1,prob=power)
R<-V+S
fwer[zz]<-mean(V>=1)
fdr[zz]<-mean(V[R>0]/R[R>0])*mean(R>0)
}
plot(mm,fwer,col="red",type="b",ylim=c(0,1))
lines(mm,fdr,col="blue")
points(mm,fdr,col="blue")
legend("topleft",legend=c("FWER","FDR"),col=c("red","blue"),lty=1,pch=1)
B<-10000
mm<-seq(from=0.1,to=0.9,by=0.1)
m1=10
m0=10
alpha=0.05
fwer<-fdr<-rep(NA,length(mm))
zz=0
for (m in mm){
zz=zz+1
V<-rbinom(B,size=m0,prob=alpha)
S<-rbinom(B,size=m1,prob=m)
R<-V+S
fwer[zz]<-mean(V>=1)
fdr[zz]<-mean(V[R>0]/R[R>0])*mean(R>0)
}
plot(mm,fwer,col="red",type="b",ylim=c(0,1))
lines(mm,fdr,col="blue")
points(mm,fdr,col="blue")
legend("topleft",legend=c("FWER","FDR"),col=c("red","blue"),lty=1,pch=1)
set.seed(1)
n=25
p.x=0.5
M=500
B=1000
x<-rbinom(n,size=1,prob=p.x)
y<-matrix(rnorm(n*500),ncol=500)
d1<-y[x==0,]
d2<-y[x==1,]
n1<-sum(x==0)
n2<-n-n1
tt<-my.fast.t.test(d1,d2,n1,n2)
p<-2*pt(abs(tt),df=n-2,lower.tail=F)
p
p[1]
p.adjust(0.77,method="holm")
p.adjust(p,method="holm")[1]
min(p)
which.min(p)
p[139]
p.adjust(p,method="holm")[139]
p.adjust(p,method="bonferroni")
p.adjust(p,method="BH")
set.seed(1)
n=25
p.x=0.5
M=500
B=1000
R.perm<-R.holm<-R.bonf<-R.bh<-rep(NA,B)
for (ii in 1:B){
x<-rbinom(n,size=1,prob=p.x)
y<-matrix(rnorm(n*500),ncol=500)
d1<-y[x==0,]
d2<-y[x==1,]
n1<-sum(x==0)
n2<-n-n1
tt<-my.fast.t.test(d1,d2,n1,n2)
p<-2*pt(abs(tt),df=n-2,lower.tail=F)
holm<-p.adjust(p,method="holm")
bonferroni<-p.adjust(p,method="bonferroni")
bh<-p.adjust(p,method="BH")
R.holm[ii]<-sum(holm<0.05)
R.bonf[ii]<-sum(bonferroni<0.05)
R.bh[ii]<-sum(bh<0.05)
#permutation
pp.or<-matrix(NA,ncol=M,nrow=500)
for (i in 1:M){
xp<-x[sample(1:n)]
d1p<-y[xp==0,]
d2p<-y[xp==1,]
ttp<-my.fast.t.test(d1p,d2p,n1,n2)
pp<-2*pt(abs(ttp),df=n-2,lower.tail=F)
pp.or[,i]<-pp[order(pp)]
}
p.adj<-rep(NA,500)
for (j in 1:500){
p.adj[j]<-(sum(   pp.or[1,]<=p[j])+1)/(1+M)
}
R.perm[ii]<-sum(p.adj<0.05)
print(ii)
}
sum(R.holm>0)/B
sum(R.bonf>0)/B
sum(R.bh>0)/B
V.R.bh<-ifelse(R.bh==0,0,1)
mean(V.R.bh)
